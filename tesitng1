---
AWSTemplateFormatVersion: '2010-09-09'
Description: Cloudformation stack for Jenkins ECS
Parameters:
  KeyName:
    Description: 'Optional: the EC2 Key Pair to allow SSH access to the instances'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: ''
  AllowedIPRange:
    Description: The public IP address range that can be used to connect to the instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/8
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  VPCIPRange:
    Description: The private IP address range for allocating IPs within the VPC.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.39.2.0/23
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    ConstraintDescription: Must be a valid EC2 instance type.
  VPCName:
    Description: VPC in which you want to launch instance
    Type: String
    Default: 'Enter the value'
    AllowedValues:
    - Enter the value
    - vpc-0c8c48ad036680e0d
  SubnetName:
    Description: Subnet in which you want to launch instance
    Type: String
    Default: 'Enter the Value of subnet'
    AllowedValues:
    - Enter the Value of subnet
    - subnet-05da6ba859e269adf
  DockerImage:
    Description: The docker image to use for Jenkins
    Type: String
    Default: jenkinsci/jenkins
  ServiceTag:
    Type: String
    Default: Code-Central
  NameTag:
    Type: String
    Default: WUCCOEDEVOPS001
  ProductTowerTag:
    Type: String
    Default: CCOE
    AllowedValues:
    - CCOE
    - Compliance
  ApplicationNameTag:
    Type: String
    Default: Code-Central
  SecurityPostureTag:
    Type: String
    Default: SSH-ONLY
  SupportContactTag:
    Type: String
    AllowedValues:
    - krish.sastry@wu.com
    Default: krish.sastry@wu.com
  ApplicationOwnerTag:
    Type: String
    Default: krish.sastry@wu.com
    AllowedValues:
    - krish.sastry@wu.com
  DomainTag:
    Type: String
    Default: Linux
  PatchgroupTag:
    Type: String
    Default: RHEL-Linux
  RequestIDTag:
    Type: String
    Default: 102020
  DescriptionTag:
    Type: String
    Default: Jump-Server
  EmployeeIDTag:
    Type: String
    Default: 309551
  EnvironmentTag:
    Type: String
    Default: Dev
    AllowedValues:
    - Dev
    - QA
    - Dev/QA
Mappings:
  RegionAmazonECSOptimizedAMIMapping:
    us-east-2:
      AMI: ami-bb8eaede
    us-east-1:
      AMI: ami-d61027ad
    us-west-2:
      AMI: ami-c6f81abe
    us-west-1:
      AMI: ami-514e6431
    eu-west-2:
      AMI: ami-0a85946e
    eu-west-1:
      AMI: ami-bd7e8dc4
    eu-central-1:
      AMI: ami-f15ff69e
    ap-northeast-1:
      AMI: ami-ab5ea9cd
    ap-southeast-2:
      AMI: ami-c3233ba0
    ap-southeast-1:
      AMI: ami-ae0b91cd
    ca-central-1:
      AMI: ami-32bb0556
Conditions:
  HasKeyName:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: KeyName
Resources:
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:RegisterTargets
            - ec2:Describe*
            - ec2:AuthorizeSecurityGroupIngress
            Resource: "*"
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecs:*
            - elasticloadbalancing:Describe*
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
  JenkinsECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: EC2Role
  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'SecurityGroup for Jenkins instances: master and slaves'
      VpcId:
        Ref: VPCName
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: AllowedIPRange
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp:
          Ref: VPCIPRange
      - IpProtocol: tcp
        FromPort: '50000'
        ToPort: '50000'
        CidrIp:
          Ref: VPCIPRange
  JenkinsELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for Jenkins ELB
      VpcId:
        Ref: VPCName
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp:
          Ref: AllowedIPRange
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS mount target
      VpcId:
        Ref: VPCName
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp:
          Ref: VPCIPRange
  JenkinsEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
      - Key: Name
        Value: JenkinsEFS
  MountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: JenkinsEFS
      SubnetId:
        Ref: SubnetName
      SecurityGroups:
      - Ref: EFSSecurityGroup
  JenkinsELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: jenkins-elb
      Scheme: internal
      Subnets:
      - Ref: SubnetName
      SecurityGroups:
      - Ref: JenkinsELBSecurityGroup
      Listeners:
      - InstancePort: '8080'
        InstanceProtocol: HTTP
        LoadBalancerPort: '80'
        Protocol: HTTP
        PolicyNames:
        - JenkinsELBStickiness
      LBCookieStickinessPolicy:
      - CookieExpirationPeriod: '3600'
        PolicyName: JenkinsELBStickiness
      HealthCheck:
        HealthyThreshold: '3'
        Interval: '20'
        Target: HTTP:8080/login
        Timeout: '2'
        UnhealthyThreshold: '10'
  JenkinsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: jenkins-cluster
  JenkinsMasterTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: jenkins-master
      NetworkMode: bridge
      ContainerDefinitions:
      - Name: jenkins-master
        Image:
          Ref: DockerImage
        MountPoints:
        - SourceVolume: data-volume
          ContainerPath: "/var/jenkins_home"
        Essential: true
        Cpu: 1024
        MemoryReservation: 992
        PortMappings:
        - HostPort: 8080
          ContainerPort: 8080
          Protocol: tcp
        - HostPort: 50000
          ContainerPort: 50000
          Protocol: tcp
      Volumes:
      - Host:
          SourcePath: "/data/"
        Name: data-volume
  JenkinsECSService:
    DependsOn:
    - JenkinsELB
    Type: AWS::ECS::Service
    Properties:
      Cluster: jenkins-cluster
      DesiredCount: 1
      ServiceName: jenkins-master
      TaskDefinition:
        Ref: JenkinsMasterTaskDefinition
      Role:
        Ref: ECSServiceRole
      LoadBalancers:
      - LoadBalancerName: jenkins-elb
        ContainerPort: '8080'
        ContainerName: jenkins-master
  JenkinsECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId:
        Fn::FindInMap:
        - RegionAmazonECSOptimizedAMIMapping
        - Ref: AWS::Region
        - AMI
      IamInstanceProfile:
        Ref: JenkinsECSInstanceProfile
      InstanceType:
        Ref: InstanceType
      KeyName:
        Fn::If:
        - HasKeyName
        - Ref: KeyName
        - Ref: AWS::NoValue
      SecurityGroups:
      - Ref: JenkinsSecurityGroup
      BlockDeviceMappings:
      - DeviceName: "/dev/xvdcz"
        Ebs:
          VolumeSize: '24'
          DeleteOnTermination: true
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - 'echo ''ECS_CLUSTER=jenkins-cluster'' >> /etc/ecs/ecs.config

'
            - "#Mount EFS volume\n"
            - 'yum install -y nfs-utils

'
            - 'EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`

'
            - EC2_REGION=
            - Ref: AWS::Region
            - "\n"
            - EFS_FILE_SYSTEM_ID=
            - Ref: JenkinsEFS
            - "\n"
            - 'EFS_PATH=$EC2_AVAIL_ZONE.$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com

'
            - 'mkdir /data

'
            - 'mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2
              $EFS_PATH:/ /data

'
            - "#Give ownership to jenkins user\n"
            - 'chown 1000 /data

'
  JenkinsECSAutoScaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Ref: SubnetName
      LaunchConfigurationName:
        Ref: JenkinsECSLaunchConfiguration
      MinSize: '2'
      MaxSize: '5'
      DesiredCapacity: '2'
      HealthCheckType: EC2
      HealthCheckGracePeriod: '400'
    Tags:
    - Key: Name
      Value: jenkins-ecs-instance
      PropagateAtLaunch: 'true'
  JenkinsClusterScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: JenkinsECSAutoScaling
      EstimatedInstanceWarmup: 60
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
      - MetricIntervalLowerBound: 0
        ScalingAdjustment: 2
  JenkinsClusterScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPU utilization peaked at 70% during the last minute
      AlarmName: JenkinsClusterScaleUpAlarm
      AlarmActions:
      - Ref: JenkinsClusterScaleUpPolicy
      Dimensions:
      - Name: ClusterName
        Value: jenkins-cluster
      MetricName: CPUReservation
      Namespace: AWS/ECS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Statistic: Maximum
      Threshold: 70
      Period: 60
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
  JenkinsClusterScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: PercentChangeInCapacity
      AutoScalingGroupName:
        Ref: JenkinsECSAutoScaling
      Cooldown: '120'
      ScalingAdjustment: "-50"
  JenkinsClusterScaleDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPU utilization is under 50% for the last 10 min (change 10
        min to 45 min for prod use as you pay by the hour )
      AlarmName: JenkinsClusterScaleDownAlarm
      AlarmActions:
      - Ref: JenkinsClusterScaleDownPolicy
      Dimensions:
      - Name: ClusterName
        Value: jenkins-cluster
      MetricName: CPUReservation
      Namespace: AWS/ECS
      ComparisonOperator: LessThanThreshold
      Statistic: Maximum
      Threshold: 50
      Period: 600
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
	JenkinsServerSecurityGroup: 
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Enable SSH & HTTP
        SecurityGroupIngress:
        - IpProtocol: tcp
		  FromPort: '22'
		  ToPort: '22'
		  CidrIp:
		    Ref: AllowedIPRange
      Tags:
      - Key: Service
        Value:
          Ref: ServiceTag
      - Key: ApplicationName
        Value:
          Ref: ApplicationNameTag
      - Key: ApplicationOwner
        Value:
          Ref: ApplicationOwnerTag
      - Key: Domain
        Value:
          Ref:DomainTag
      - Key: Patchgroup
        Value:
          Ref:PatchgroupTag
      - Key: Name
        Value:
          Ref: NameTag
      - Key: ProductTower
        Value:
          Ref: ProductTowerTag
      - Key: RequestID
        Value:
          Ref:RequestIDTag
      - Key: Description
        Value:
          Ref:DescriptionTag
      - Key: SecurityPosture
        Value:
          Ref: SecurityPostureTag
      - Key: SupportContact
        Value:
          Ref: SupportContactTag
      - Key: EmployeeID
        Value:
          Ref:EmployeeIDTag
      - Key: Environment
        Value:
          Ref: EnvironmentTag


Outputs:
  JenkinsELB:
    Description: Jenkins URL
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - JenkinsELB
          - DNSName
ECS_Jenkins_Deployedtest_Task2.txt
Displaying ECS_Jenkins_Deployedtest_Task2.txt.
